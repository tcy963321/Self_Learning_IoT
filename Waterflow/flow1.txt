#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

int flowPin = D2;
float mLMeasured;    
float totalmL = 0;
volatile int pulses = 0;
unsigned int totalPulses = 0;
unsigned long lastMillis = 0;

const char* ssid = "Wickwicktang83258325@unifi";// 
const char* password = "ABC0123456789";
//WiFiClient client;
char server[] = "192.168.0.147";   //eg: 192.168.0.222
WiFiClient client; 

void setup() {
  Serial.begin(9600);
  pinMode(D2, INPUT_PULLUP);
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
 WiFi.begin(ssid, password);
 while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
 
  // Start the server
//  server.begin();
  Serial.println("Server started");
  Serial.print(WiFi.localIP());
  delay(1000);
  Serial.println("connecting...");
   attachInterrupt(digitalPinToInterrupt(D2), Flow, FALLING); 
}
void loop() {
  if( millis() - lastMillis >= 1000 ) {
    detachInterrupt(digitalPinToInterrupt(D2));
    lastMillis = millis();
    /*
     * flow rate is 330 pulses per liter
     * convert to mL per pulse (1000/330) = 3.03
     * multiply pulses by mL per pulse to get usage
     */
    mLMeasured = (pulses * 3.03);
    totalmL += mLMeasured;
    totalPulses += pulses;
    
    if( mLMeasured > 0 ) {
      Serial.print("Pulses: ");
      Serial.println(pulses);
      Serial.print("mL: ");
      Serial.println(mLMeasured);
      Serial.print("Liters: ");
      Serial.println(mLMeasured / 1000);
      Serial.print("Total: ");
      Serial.println(totalmL);
      Serial.print("TP: ");
      Serial.println(totalPulses);
    if (client.connect(server, 80)) {
    Serial.println("connected");
    // Make a HTTP request:
    Serial.print("GET /waterflow/dht11.php?totalmL=");
    client.print("GET /waterflow/dht11.php?totalmL=");     //YOUR URL
    Serial.println(totalmL);
    client.print(totalmL);
    client.print("&totalPulses=");
    Serial.println("&totalPulses=");
    client.print(totalPulses);
    Serial.println(totalPulses);
    client.print(" ");      //SPACE BEFORE HTTP/1.1
    client.print("HTTP/1.1");
    client.println();
    client.println("Host: 192.168.0.147");
    client.println("Connection: close");
    client.println();
  } else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }
    }
    else {
      Serial.println("Nothing to save...");
    }
        pulses = 0;
    attachInterrupt(digitalPinToInterrupt(D2), Flow, FALLING); 
  }
}
ICACHE_RAM_ATTR void Flow(){
    pulses++; //Every time this function is called, increment "pulses" by 1
}
